<!DOCTYPE html>
<html>

    <head>
    {{#each project_data}}
    <title>{{project_name}} Batch Sheet </title>
    {{/each}}

    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <link rel="stylesheet" type="text/css" href="styles.css" media="print">
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.7.7/handlebars.min.js"></script>

    <script>
        Handlebars.registerHelper('eq', function(a, b) {
            return a === b;
        });
    </script>

    {{!-- <script type="text/javascript" src="/routes/projects.js"></script> --}}
    <script src="https://unpkg.com/jspdf@latest/dist/jspdf.umd.min.js"></script>
    <link rel="stylesheet" href="/partials/color.css">
    <link rel="stylesheet" href="/styles/formula.css">
    
    </head>
        <style>
            .container {
            display: flex;
            }

        </style>

        <body style="display: flex; flex-direction: column;">
        
        <!-- NAVIGATION SIDEBAR -->
        <div style="display: flex; justify-content:space-between;">
            {{> navbar}}

           {{> logout}}
        </div>

        <div id="contentContainer" style="padding: 2% 2% 0% 2%">

        {{#each project_data}}
            <!-- https://materializecss.com/cards.html -->
                <div>
                    <h1>{{project_name}} Formulas </h1>

                    <div class="exclude-pdf">
                        <a href = "/formulas/{{this.project_id}}" class="btn waves-effect waves-luluble-pink luluble-pink">BACK</a>
                    </div>

                {{!-- <button id = "back_button" class="btn waves-effect waves-luluble-pink luluble-pink"><a href = "/projects/" + {{project_id}}>BACK</a></button> --}}
                <p>&nbsp;</p>
                <p><b>Client:</b> {{this.client}}</p>
                <p><b>Date:</b> {{formatDate this.date}}</p>
                <p><b>Contact name: </b>{{client_name}}</p>
                <p><b>Contact email: </b>{{client_email}}</p>
                <p>&nbsp;</p>
            </div>
        {{/each}}          
          
        <script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>

        <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0-beta/js/materialize.min.js"></script>

        <script src="/routes/formulas.js"></script>

        <script src="path/to/jspdf.debug.js"></script>
        <script src="path/to/html2canvas.js"></script>

        {{!-- <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css"> --}}

        <!-- Include jQuery -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>

        <!-- Include jsPDF -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.5.3/jspdf.debug.js"></script>


        {{!-- clicking new ingredient button --}}
        <script>
            $(document).ready(function() {
                $("#add_button").click(function() {
                var inputValue1 = $("#userInput1").val();
                var inputValue2 = $("#userInput2").val();
                var inputValue3 = $("#userInput3").val();

                window.location += "/formulaformsubmit";
                //$(window).attr("location", "inventoryformsubmit/" + inputValue1);
                });
            });
        </script>

        <script>
            $(document).ready(function () {
                $('.modal').modal();
            })
        </script>

        <script>
            let phaseCount = 1;
            document.getElementById("phaseCount").innerHTML = phaseCount;
        </script>


        <style>
            @media (max-width: 992px) {
            .hide-column {
                display: none;
            }
            }
        </style>

        <script>
            // Get all the elements with the 'truncate-decimal' class
            var elements = document.getElementsByClassName('truncate-decimal');

            // Loop through each element
            for (var i = 0; i < elements.length; i++) {
            var element = elements[i];
            
            // Get the text content of the element
            var text = element.textContent.trim();
            
            // Truncate the decimal value to a specified length (e.g., 4)
            var truncatedText = parseFloat(text).toFixed(4);
            
            // Update the element's text content with the truncated value
            element.textContent = truncatedText;
            }
        </script>


        <div class="row">
            <div class="bothTables">
                <div class="col s7 push-s0" style="overflow-x: scroll;">
                    <span>
                        <table id = "table1" class="pdf-table scrollable ingTable" style="table-layout: fixed; width: 50%">
                            <thead>
                                <tr>
                                    <th style = "width:85px">Phase</th>
                                    <th style = "width: 200px">Trade Name</th>
                                    <th style="width: 200px">INCI</th>
                                    <th style="width: 200px">Supplier</th>
                                    <th style="width: 150px">Lot Number</th>
                                        
                                </tr>
                            </thead>
                            
                            {{#each ing_data}}
                                <tr style="overflow: scroll; height: 85px">
                                

                                    <td>{{phase}}</td>
                                    <td>{{trade_name}}</td>
                                    <td>{{inci_name}}</td>
                                    <td>{{supplier}}</td>
                                    <td>{{lot_num}}</td>
                                </tr>
                            {{/each}}
                        </table>
                    </span>
                </div>

                <div class="col s5 push-s0" style="overflow-x: scroll;">
                    <span>
                        <table class = "pdf-table scrollable amtTable" id = "info" style = "width: 60%">
                            <tr>
                                <th>Percentage</th>
                                <th>Amount</th>
                            </tr>

                            {{#each ingredient_dict}}
                                <tr>

                                    <td>
                                        <p>&nbsp;</p>
                                        {{percent_of_ingredient}}
                                        <p>&nbsp;</p>
                                    </td>
                                
                                    <td>
                                        <p>&nbsp;</p>
                                        <span class="truncate-decimal">{{amount}}</span>
                                        <p>&nbsp;</p>
                                    </td>
                                    
                                </tr>
                            {{/each}}
                        </table> 
                    </span>
                </div>
            </div>
        </div>

        <div class="row">

            <script>
                var myVariables = document.getElementsByClassName("myVariable");
                var myVariable = 1;

                for (var i = 0; i < myVariables.length; i++) {
                    myVariables[i].textContent = myVariable.toString();
                    myVariable++;
                }
            </script>

                <div class="exclude-pdf">

                {{#ifBothTrue sufficient formulaComplete}}
                <div class="row exclude-pdf">
                    <a href="#makeFormulaIngredient" class="btn waves-effect waves-luluble-pink luluble-pink modal-trigger">MAKE</a>
                </div>                    
                {{/ifBothTrue }}
                </div>

                <div id="makeFormulaIngredient" class="exclude-pdf modal">
                    <div class="modal-content">
                    <h6>Are you sure you would like to make <b>{{amount}}</b> grams of <b>{{#each project_data}}{{project_name}}{{/each}} Trial {{trial_num}}</b>? </h6>
                    <p>&nbsp;</p>
                    <h8 style="color: red;">Note that these changes CANNOT BE REVERSED.</h8>
                    </div>
                    <div class="modal-footer">
                    <a class="btn waves-effect waves-luluble-pink luluble-pink modal-trigger" href="/projects/{{project_id}}/{{trial_num}}/{{amount}}/makeformsubmit">YES</a>
                    </div>
                </div>

                <div class="row exclude-pdf">
                    <a href="#seeProcedure" class="btn waves-effect waves-luluble-pink luluble-pink modal-trigger">See Procedure</a>
                </div> 

                <div id="seeProcedure" class="modal">
                    <div class="modal-content">
                        <table id="procedure-table" class="sortable">
                            <thead>
                                <tr id = "ing">
                                    <th>Phase</th>
                                    <th>Procedure</th>
                                    <th>Comments/Ingredients</th>
                                    <th>Initial Temperature (C)</th>
                                    <th>Final Temperature (C)</th>
                                    <th>Timing (min)</th>
                                    <th>Initial Mixing (rpm)</th>
                                    <th>Final Mixing (rpm)</th>
                                    <th>Mixer Type</th>
                                    <th>Blade</th>
                                </tr>
                            </thead>
                            <tbody>

                                {{#each procedure_results}}
                                <tr>
                                    <td contenteditable="true">{{phase_num}}</td>
                                    <td contenteditable="true">{{proc}}</td>
                                    <td contenteditable="true">{{comments}}</td>
                                    <td contenteditable="true">{{temp_init}}</td>
                                    <td contenteditable="true">{{temp_final}}</td>
                                    <td contenteditable="true">{{timing}}</td>
                                    <td contenteditable="true">{{mixing_init}}</td>
                                    <td contenteditable="true">{{mixing_final}}</td>
                                    <td contenteditable="true">{{mixer_type}}</td>
                                    <td contenteditable="true">{{blade}}</td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <button id="exportButton" class="btn waves-effect waves-luluble-pink luluble-pink">Convert to CSV File</button>

            <p>&nbsp;</p>
                    
            </div>

              <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>

                <script>
                    function incrementIndex(index) {
                        return index + 1;
                    }
                </script>


<!-- Include jsPDF library -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.3.1/jspdf.umd.min.js"></script>

<!-- Include html2canvas library -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.3.2/html2canvas.min.js"></script>

<!-- Include jspdf-autotable library -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.21/jspdf.plugin.autotable.min.js"></script>

<script>
  document.getElementById('convertToPdf').addEventListener('click', function() {
    // Get the content container element
    var contentContainer = document.getElementById('contentContainer');

    var excludedElements = contentContainer.getElementsByClassName('exclude-pdf');
    for (var i = 0; i < excludedElements.length; i++) {
      excludedElements[i].style.display = 'none';
    }

    var pageWidth = contentContainer.offsetWidth;
    var pageHeight = contentContainer.offsetHeight;

    // Create a new jsPDF instance with landscape orientation and custom page size
    var doc = new jsPDF({
      orientation: 'landscape',
      unit: 'px',
      format: [pageWidth, pageHeight], // Set custom page size
    });

    // Use html2canvas to capture the content as an image with the correct dimensions
    html2canvas(contentContainer, {
      width: pageWidth,
      height: pageHeight * 1.5, // Set a larger height to avoid cropping at the bottom
      useCORS: true, // Use CORS to handle cross-origin images (if needed)
      allowTaint: true, // Allow tainting for external images
    }).then(function(canvas) {
      // Convert the canvas image to a data URL
      var imgData = canvas.toDataURL('image/jpeg', 1.0);

    for (var i = 0; i < excludedElements.length; i++) {
        excludedElements[i].style.display = '';
      }

      // Add the image to the PDF with the same dimensions as the content
      // You can add a margin to ensure the table fits within the page
      var margin = 10; // Set the desired margin in pixels
      doc.addImage(imgData, 'JPEG', margin, margin, pageWidth - 1.5 * margin, pageHeight - 1.5 * margin);

      // Save the PDF file
      doc.save('Batchsheet.pdf');
    });
  });
</script>

{{#if messages}}
<div style = "position: fixed;top: 60px;right: 20px;">
    {{#each messages}}
    <div class = "flash-message" style="background-color: #ffcdd2;padding: 10px;margin-bottom: 10px; border-radius: 5px;box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);word-wrap: break-word;max-width:300px;">
        <p>{{this}}</p>
    </div>
    {{/each}}
</div>
{{/if}}

<script>
    var flashMessages = document.querySelectorAll('.flash-message');
    flashMessages.forEach(function(flashMessage, index) {
        setTimeout(function() {
        flashMessage.style.display = 'none';
        }, (index + 1) * 5000);
    });
</script>



            <script>
                function incrementIndex(index) {
                    return index + 1;
                }
            </script>

            <!-- Include jsPDF library -->
            <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.3.1/jspdf.umd.min.js"></script>

            <!-- Include html2canvas library -->
            <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.3.2/html2canvas.min.js"></script>

            <!-- Include jspdf-autotable library -->
            <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.21/jspdf.plugin.autotable.min.js"></script>

            <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.0/html2pdf.bundle.min.js"></script>

            <!-- Include SheetJS from CDN -->
            <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>



            <script>
                // Function to handle the export
                function exportToCSV() {
                    const tableData = [];

                    // Collect data from projectInfo

                    // Collect data from #table1 and #info
                    const headersTable1 = [
                        "Phase",
                        "Trade Name",
                        "INCI",
                        "Supplier",
                        "Lot Number",
                        "Percentage",
                        "Amount"
                    ];
                    const rowsTable1 = document.querySelectorAll("#table1 tbody tr");
                    const amtRowsTable1 = document.querySelectorAll("#info tbody tr:not(:first-child)");

                    // Add headers for #table1 and #info as a separate row in the CSV
                    tableData.push(headersTable1.join(","));

                    // Collect data from each row in #table1 and #info
                    rowsTable1.forEach((row, index) => {
                        const rowData = [];
                        const amtRow = amtRowsTable1[index];
                        row.querySelectorAll("td").forEach((cell) => {
                        rowData.push('"' + cell.textContent.trim() + '"'); // Use textContent instead of innerText
                        });

                        amtRow.querySelectorAll("td").forEach((cell) => {
                        rowData.push('"' + cell.textContent.trim() + '"'); // Use textContent instead of innerText
                        });

                        tableData.push(rowData.join(","));
                    });

                    // Add an empty row between the tables
                    tableData.push([]);

                    // Add an empty row between the tables
                    tableData.push([]);

                    // Collect headers for #procedure-table
                    const headersProcedureTable = [
                        "Phase",
                        "Procedure",
                        "Comments/Ingredients",
                        "Initial Temperature (C)",
                        "Final Temperature (C)",
                        "Timing (min)",
                        "Initial Mixing (rpm)",
                        "Final Mixing (rpm)",
                        "Mixer Type",
                        "Blade"
                    ];

                    // Add headers for #procedure-table as a separate row in the CSV
                    tableData.push(headersProcedureTable.join(","));

                    // Collect data from #procedure-table
                    const procedureRows = document.querySelectorAll("#procedure-table tbody tr");

                    // Collect data from each row in #procedure-table
                    procedureRows.forEach((row) => {
                        const rowData = [];
                        row.querySelectorAll("td").forEach((cell) => {
                        rowData.push('"' + cell.textContent.trim() + '"'); // Use textContent instead of innerText
                        });

                        tableData.push(rowData.join(","));
                    });

                    // Convert tableData to CSV format
                    const csvContent = tableData.join("\n");

                    // Download the CSV file
                    const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
                    const url = URL.createObjectURL(blob);
                    const link = document.createElement("a");
                    link.setAttribute("href", url);
                    link.setAttribute("download", "Batchsheet for Trial {{trial_num}} of {{#each project_data}}{{project_name}}{{/each}}.csv");
                    link.style.display = "none";
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                }

                // Add a click event listener to the export button
                document.getElementById("exportButton").addEventListener("click", exportToCSV);
            </script>

            <script>
                document.addEventListener('DOMContentLoaded', function() {
                var modals = document.querySelectorAll('.modal');
                M.Modal.init(modals);
                });
            </script>

            <script>
                    document.addEventListener('DOMContentLoaded', function() {
                var elems = document.querySelectorAll('.modal');
                var instances = M.Modal.init(elems);
                });
            </script>

            <script>
                $(document).ready(function() {
                    $('.modal').modal();
                });
            </script>

            </div>
        </div>
    </div>

</body>

</html>